// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var File = exports.File = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var JukeMessage = exports.JukeMessage = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineFile()
defineJukeMessage()

function defineFile () {
  File.encodingLength = encodingLength
  File.encode = encode
  File.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.date)) {
      var len = encodings.varint.encodingLength(obj.date)
      length += 1 + len
    }
    if (defined(obj.data)) {
      var len = encodings.bytes.encodingLength(obj.data)
      length += 1 + len
    }
    if (defined(obj.type)) {
      var len = encodings.string.encodingLength(obj.type)
      length += 1 + len
    }
    if (defined(obj.name)) {
      var len = encodings.string.encodingLength(obj.name)
      length += 1 + len
    }
    if (defined(obj.encoding)) {
      var len = encodings.varint.encodingLength(obj.encoding)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.date)) {
      buf[offset++] = 8
      encodings.varint.encode(obj.date, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.data)) {
      buf[offset++] = 26
      encodings.bytes.encode(obj.data, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.type)) {
      buf[offset++] = 34
      encodings.string.encode(obj.type, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.name)) {
      buf[offset++] = 42
      encodings.string.encode(obj.name, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.encoding)) {
      buf[offset++] = 48
      encodings.varint.encode(obj.encoding, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      date: 0,
      data: null,
      type: "",
      name: "",
      encoding: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.date = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 3:
        obj.data = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 4:
        obj.type = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 5:
        obj.name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 6:
        obj.encoding = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineJukeMessage () {
  JukeMessage.encodingLength = encodingLength
  JukeMessage.encode = encode
  JukeMessage.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.tune)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (defined(obj.tune)) {
      var len = File.encodingLength(obj.tune)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.theme)) {
      var len = encodings.int32.encodingLength(obj.theme)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.tune)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (defined(obj.tune)) {
      buf[offset++] = 10
      varint.encode(File.encodingLength(obj.tune), buf, offset)
      offset += varint.encode.bytes
      File.encode(obj.tune, buf, offset)
      offset += File.encode.bytes
    }
    if (defined(obj.theme)) {
      buf[offset++] = 16
      encodings.int32.encode(obj.theme, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      tune: null,
      theme: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.tune = File.decode(buf, offset, offset + len)
        offset += File.decode.bytes
        break
        case 2:
        obj.theme = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
